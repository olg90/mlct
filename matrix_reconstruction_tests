################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
#
#
#
#
#                           Matrix Completion tests   
#
#
#
#
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################


################################################################################
#
#                           Libraries  
#
################################################################################

import numpy as np
import cv2
import matplotlib.pyplot as plt
import os
import sys
import random

from skimage import io
from skimage.io import imread
from skimage.transform import radon, rescale, iradon

import scipy.io


#Python library fancyimpute tests for matrix completion of projections
from fancyimpute import KNN, NuclearNormMinimization, SoftImpute, BiScaler

################################################################################
#
#                           Functions  
#
################################################################################
def get_n_random_images(n, dir_list, dir_names):
    
    """Get n random images including all their scan types.

    Returns a dictionary with keys that are the names of the scan types:
    
    AW - Aperture with walnut.
    NAW - No aperture with walnut.
    ANW - Aperture no walnut.
    NANW - No aperture no walnut."""
    
    num_imgs = 458
    

    img_dict = {}
    for i,DIR in enumerate(dir_list):
        os.chdir(dir_list[i])
        sample_indices = random.sample(list(np.arange(1, num_imgs + 1)), n)
        filenames = ['/P{}.RAW.MAT'.format(num(x)) for x in sample_indices]
        imgs = [scipy.io.loadmat(DIR + filename) for filename in filenames]
        imgs = [imgs[i]['data'] for i in range(len(imgs))]
        img_dict[dir_names[i]] = imgs
    return img_dict

def num(x):
    """Function that returns a number of the form xxxxxx, where all numbers
    ahead of the leading integer are 0."""
    if x < 10:
        return '0000{}'.format(x)
    if (x < 100) & (x >= 10):
        return '000{}'.format(x)
    if (x < 1000) & (x >= 100):
        return '00{}'.format(x)
    

def plot_example_projections(dir_list, dir_names):
    #Function that plots examples of projections
    filename = '/P00120.RAW.MAT'
    for i,directory in enumerate(dir_list):
        os.chdir(directory)
        mat = scipy.io.loadmat(directory + filename)
        mat = mat['data']
        plt.subplot(1,4,i+1 )
        plt.imshow(mat, cmap = 'gray')
        plt.axis('off')
        plt.title( dir_names[i])
    plt.show()


def plot_reconstructions(test_walnut, reconstructed_walnuts,
                         reconstruction_titles):
    """Plot all the reconstructions and their error graphs.

    Arguments:
        test_walnut (2d array)
        reconstructed_walnuts (list of 2d arrays)
        reconstruction_titles (list of strings)

    Argument Conditions:
        reconstructed_walnuts and reconstruction_titles
        must have the same length
        
    Returns: Nothing
    """

    n_tests = len(reconstructed_walnuts)
    fig, ax = plt.subplots(n_tests, 3)
    for i in range(n_tests):
        ax[i, 0].imshow(test_walnut, cmap='gray')
        ax[i, 0].axis('off')
        ax[i, 1].imshow(reconstructed_walnuts[i], cmap='gray')
        ax[i, 1].axis('off')
        error_graph = abs(test_walnut - reconstructed_walnuts[i])
        error = (error_graph**2).mean(axis = None)
        error = np.round(error, 2)
        ax[i, 2].imshow(error_graph, cmap='gray')
        ax[i, 2].set_title(reconstruction_titles[i] + \
                ' error = {}'.format(error))
        ax[i, 2].axis('off')
    fig.suptitle('Plot of all reconstructions and errors.')
    plt.show()

def convert_zeros_to_nans(test_walnut, test_filtered_aperture):
    """Function that converts """
    op_aper = 1-test_filtered_aperture
    op_aper = op_aper.astype(float)
    op_aper[op_aper == 1] = np.nan
    test_filt_walnut = test_walnut + op_aper
    return test_filt_walnut

def filter_aperture(apertures, test_num, filt_num, plot_it = False):
    test_aperture = apertures[test_num].copy()
    test_aperture[test_aperture <= filt_num] = 0
    test_aperture[test_aperture > filt_num] = 1
    if plot_it != False:
        plt.subplot(1,3,1)
        plt.imshow(apertures[test_num], cmap='gray')
        plt.subplot(1,3,2)
        plt.imshow(test_aperture, cmap='gray')
        plt.subplot(1,3,3)

    match = np.sum((apertures[test_num] == test_aperture)) / test_aperture.size
    error = apertures[0] - test_aperture
    if plot_it != False:
        plt.imshow(error, cmap='gray')
        plt.title('{0:.4f}'.format(match))
        plt.show()
    return test_aperture, match

################################################################################
#
#                           Set up the data  
#
################################################################################

#Get directories
dir_AW ='C:\/Users\Oliver\Desktop\Walnut\Tungsten'+\
            'CodedApertureWithWalnut\Python Files'

dir_NAW = 'C:\/Users\Oliver\Desktop\Walnut\Walnut_NoCodedAperture\Python Files'


dir_ANW = 'C:\/Users\Oliver\Desktop\Walnut\Tungsten' + \
          'CodedAperture_OnlyTheCode\Python Files'

dir_NANW = 'C:\/Users\Oliver\Desktop\Walnut\BlankScan_'+\
           'NoObjects_NoCodedAperture\Python Files'

dir_list = [dir_AW, dir_NAW, dir_ANW, dir_NANW]
dir_names = ['AW', 'NAW', 'ANW', 'NANW']

#Choose 3 random images and collect the slices from each directory
n = 3
imgs = get_n_random_images(n, dir_list, dir_names)
walnuts = imgs['NAW']
filtered_walnuts = imgs['AW']
apertures = imgs['ANW'] #High means pass, low means block
blank_scans = imgs['NANW']

#Choose the 0-th image to test
test_num = 0
test_walnut = walnuts[test_num]

#Incomplete matrix setup - The missing parts of the image
#must be filled in with NaNs.

test_filtered_aperture, match = filter_aperture(apertures, test_num = test_num,
                                       filt_num = 500, plot_it = True)
walnut_nans = convert_zeros_to_nans(test_walnut, test_filtered_aperture)


################################################################################
#
#                           Matrix Completion Tests  
#
################################################################################

# Use 3 nearest rows which have a feature to
# fill in each row's missing features
walnut_knn = KNN(k=3).fit_transform(walnut_nans)

#Nuclear norm minimization

s11 = walnut_nans[:walnut_nans.shape[0], :walnut_nans.shape[1]]
walnut_nnm = NuclearNormMinimization().fit_transform(walnut_nans)

# Instead of solving the nuclear norm objective directly, instead
# induce sparsity using singular value thresholding
walnut_nans_normaized = BiScaler().fit_transform(walnut_nans)
walnut_softimpute = SoftImpute().fit_transform(walnut_nans_normalized)

# print mean squared error for the  imputation methods above
nnm_mse = ((X_filled_nnm[missing_mask] - X[missing_mask]) ** 2).mean()
print("Nuclear norm minimization MSE: %f" % nnm_mse)

softImpute_mse = ((X_filled_softimpute[missing_mask] - X[missing_mask]) ** 2).mean()
print("SoftImpute MSE: %f" % softImpute_mse)

knn_mse = ((X_filled_knn[missing_mask] - X[missing_mask]) ** 2).mean()
print("knnImpute MSE: %f" % knn_mse)

plot_reconstructions(test_walnut, [walnut_knn, walnut_knn],
                     ['knn', 'knn'])   
    

knn_title = ('Nearest neighbor imputations which \n'+\
             'weights samples using the mean squared\n'+\
             ' difference on features for which\n'+\
             ' two rows both have observed data.')

test_walnut = walnuts[0]
walnut_nans = convert_zeros_to_nans(test_walnut, test_filtered_aperture)


################################################################################
#
#                           Commented-out-code 
#
################################################################################


##Plot examples of the images
##plot_example_projections(dir_list, dir_list)




##
##os.chdir('C://Users/Oliver/Desktop/Walnut')
##
##walnut_images = 'WalnutNOCA_13_20191225_132142.tif'
##
##walnut = io.imread(walnut_images)
##
###Plot a slice of the walnut
##plt.imshow(walnut[120], cmap='gray')
##plt.title('Plot of the 120th slice of the walnut from the .TIF file')
##plt.axis('off')
##plt.show()
##
##




###Find the best filter number, which was found to be e 1966
##matches = []
##for i in range(np.min(apertures[0]), np.max(apertures[0])):
##    x = _, match = filter_aperture(apertures, 0, i, plot_it = False)
##    matches.append()
##    print(i/np.max(apertures[0]))
##plt.plot(matches)
##plt.scatter([190], matches[190])
##plt.show()




##derivative = [matches[i-1] - matches[i] for i in range(1, len(matches))]
##plt.plot(derivative)
##plt.show()
##
##np.argmax(derivative)
