import os
import matplotlib.pyplot as plt
import cv2
import numpy as np
import random

from keras.layers import Input, Dense, Conv2D, MaxPooling2D, \
merge, Dropout, UpSampling2D, Cropping2D, Add
from keras.layers import BatchNormalization
from keras.models import Model, load_model

from skimage.transform import radon, iradon

###############################################################################
#
#                             Functions
#
###############################################################################

def def_args(**x):
    return x

def plot(img, title = None):
    plt.imshow(img, cmap='gray')
    if title != None:
        plt.title(title)
    plt.axis('off')
    plt.show()

def get_images(args):
    
    files = os.listdir(args['address'])
    random.shuffle(files)
    num_files = args['img_num']
    img_size = args['img_size']

    images = {}
    for i in range(num_files):
        img = cv2.imread(files[i], 0)
        images[i] = cv2.resize(img, (img_size, img_size)).astype(np.uint8)
    return images


def get_filters(args, img):

    block_percentage = args['block_percentage']
    filts = {}
    size_tuple = img[0].shape
    for i in range(args['img_num']):
        filt = np.random.choice([True, False], img[0].size, \
        p = [(1 - block_percentage), block_percentage]).reshape(size_tuple)
        #Add 'p' in p = []
        filts[i] = filt
    return filts


def filter_images(images, filters, args):
    filtered_images = {}
    for i in range(args['img_num']):
        filtered_image = np.zeros((images[i].shape[0], images[i].shape[1]))
        filtered_image[filters[i]] = images[i][filters[i]]
        filtered_images[i] = filtered_image
    return filtered_images


def stand_norm(X):
    stdr = (X - np.mean(X)) / np.std(X)
    normalized = (stdr - np.min(stdr)) / (np.max(stdr) - np.min(stdr))
    return normalized

def get_phantoms(args):
    shades = np.linspace(60, 255, 4).astype(np.uint8)
    n_phantoms = args['img_num']
    phantoms = {}
    for j in range(n_phantoms):
        n_shapes = 10
        c = np.zeros((args['img_size'], args['img_size']))
        for i in range(n_shapes):
            x_coords = np.sort(np.random.randint(0, args['img_size'], 2))
            y_coords = np.sort(np.random.randint(0, args['img_size'], 2))
            c[x_coords[0]:x_coords[1], \
              y_coords[0]: y_coords[1]] = np.random.choice(shades)
            c %= 256
            phantoms[j] = c
    theta = np.linspace(0,180, args['img_size'])
    radons = {}
    for i in range(n_phantoms):
        radons[i] = radon(phantoms[i], theta)
    return phantoms, radons


def training_sets(images, filtered_images, args):
    
    X_train = np.array([stand_norm(filtered_images[i]) \
                        for i in range(args['img_num'])])
    y_train = np.array([stand_norm(images[i]) \
                        for i in range(args['img_num'])])
    X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], \
                              X_train.shape[2], 1)
    y_train = y_train.reshape(y_train.shape[0], y_train.shape[1], \
                              y_train.shape[2], 1)
    return X_train, y_train
	
def plots(*x):
    x_size = len(x)
    for i in range(x_size):
        if type(x[i]) == tuple:  
            plt.subplot(1, x_size, i + 1)
            plt.imshow(x[i][0], cmap='gray')
            plt.title(x[i][1])
            plt.axis('off')
        else:
            plt.subplot(1, x_size, i + 1)
            plt.imshow(x[i], cmap='gray')
            plt.axis('off')
            
    plt.show()

#Plot the good result
def plot_good(final_results, n):
    return final_results[n][4], final_results[n][7]	
	
def plot_results(pred_nums, filtered_sinograms, inpainted_sinograms,\
                 median_inpaints, phantoms, images, results, args, theta):
    n_imgs = 8
    num_pred = len(pred_nums)
    imgs = {}
    for i in range(0, num_pred):
        #Empty array to be filled
        u = []

        #Plot phantom
        plt.subplot(n_imgs, num_pred, 0*num_results + i+1)
        plt.axis('off')
        plt.imshow(phantoms[pred_nums[i]], cmap = 'gray')
        u.append(phantoms[pred_nums[i]])
        
        #Plot sinograms
        plt.subplot(n_imgs, num_pred, 1*num_results + i+1)
        plt.axis('off')
        plt.imshow(images[pred_nums[i]], cmap = 'gray')
        u.append(images[pred_nums[i]])

        #Plot filtered_sinograms
        plt.subplot(n_imgs, num_results, 2*num_results + i+1)
        plt.axis('off')
        plt.imshow(filtered_sinograms[pred_nums[i]], cmap = 'gray')
        u.append(filtered_sinograms[pred_nums[i]])

        #Plot neural network remake of sinograms
        plt.subplot(n_imgs, num_results, 3*num_results + i+1)
        plt.axis('off')
        plt.imshow(results[pred_nums[i]], cmap = 'gray')
        u.append(results[pred_nums[i]])

        #Plot iradon of image
        plt.subplot(n_imgs, num_results, 4*num_results + i+1)
        plt.axis('off')
        plt.imshow(iradon(images[pred_nums[i]], theta), cmap = 'gray')
        u.append(iradon(images[pred_nums[i]], theta))

        #Plot iradon of neural network
        plt.subplot(n_imgs, num_results, 5*num_results + i+1)
        plt.axis('off')
        plt.imshow(iradon(results[pred_nums[i]], theta), cmap = 'gray')
        u.append(iradon(results[pred_nums[i]], theta))

        #Plot iradon of inpainted
        plt.subplot(n_imgs, num_results, 6*num_results + i+1)
        plt.axis('off')
        plt.imshow(iradon(filtered_sinograms[pred_nums[i]], theta), cmap = 'gray')
        u.append(iradon(filtered_sinograms[pred_nums[i]], theta))

        #Plot iradon of median_inpainted
        plt.subplot(n_imgs, num_results, 7*num_results + i+1)
        plt.axis('off')
        plt.imshow(iradon(median_inpaints[pred_nums[i]], theta), cmap = 'gray')
        u.append(iradon(median_inpaints[pred_nums[i]], theta))

        imgs[i] = np.array(u)
        
    plt.show()
    return imgs
	
	
def median_blur(inpainted_sinograms, ksize, args):
    blurred = {}
    for i in range(len(inpainted_sinograms)):
        blur = cv2.medianBlur(inpainted_sinograms[i], ksize)
        blurred[i] = blur
    return blurred
	
def get_predictions(sinograms, model, ss0, ss1):
	preds = []
	for i in range(len(sinograms)):
		img = filtered_sinograms[i]
		img = img.reshape((1,ss0,ss1,1))
		prediction = model.predict(img)
		preds.append(prediction)
	preds = np.array(preds)
	predictions = preds.reshape((args['img_num'], ss0, ss1))
	return predictions
	
def to_255(img):
    #Rescales the image to 0-255 pixel values
    img = img - np.min(img)
    img = 255 * img / np.max(img)
    img = img.astype(np.uint8)
    return img


def inpaint(filtered_sinograms, filters, predictions, args):
   
    inpainted = {}
    for i in range(len(filtered_sinograms)):
        inpainting = to_255(filtered_sinograms[i].copy()) 
        mask = (1-filters[i]).astype(np.bool)
        inpainting[mask] = to_255(predictions[i])[mask]
        inpainted[i] = inpainting
    return inpainted

def plot_collection(*collections):
    sizes = [len(collection) for collection in collections]
    max_size = max(sizes)
    for i,collection in enumerate(collections):
        for j,img in enumerate(collection):
            if len(img) != 2:
                plt.subplot(len(collections),max_size, i*max_size+j+1)
                plt.imshow(img, cmap='gray')
                plt.axis('off')
            else:
                plt.subplot(len(collections),max_size, i*max_size+j+1)
                plt.imshow(img[0], cmap='gray')
                plt.title(img[1])
                plt.axis('off')
                
    plt.show()


def get_errors(final_results_3, good_num):
    img_irad_3, img_rec_3 = plot_good(final_results_3, good_num)
    error_3 = np.abs(img_irad_3 - img_rec_3)
    error_error_3 = np.abs(final_results_3[good_num][0] - error_3)
    added_back_3 = error_3 + error_error_3
    return img_irad_3, img_rec_3, error_3, error_error_3, added_back_3, good_num

def post_network(sinograms, filters, model_3, args):
    ss0 = sinograms[0].shape[0]
    ss1 = sinograms[0].shape[1]

    predictions_3 = get_predictions(sinograms, model_3, ss0, ss1)
    inpainted_sinograms_3 = inpaint(filtered_sinograms, filters, predictions_3, args)         
    median_inpaints_3 = median_blur(inpainted_sinograms_3, 3, args)
    return predictions_3, inpainted_sinograms_3, median_inpaints_3
        
###############################################################################
#
#                            Set up the data
#
###############################################################################

args = def_args(
    img_num = 1000,
    img_size = 64,
    block_percentage = 0.05,
	#Home address
    address = 'C:/Users/Oliver/Desktop/X-rays'
	
	#Work address
	#address = 'C:/Users/Oliver.ANGELA-PC/Desktop/X-ray codes'
)

os.chdir(args['address'])

phantoms, sinograms = get_phantoms(args)
filters = get_filters(args, sinograms)
filtered_sinograms = filter_images(sinograms, filters, args)

plot(sinograms[0])
plot(filtered_sinograms[0])

###############################################################################
#
#                      Convolutional Neural Network 1
#
###############################################################################

def nn_1(sinograms, filtered_sinograms, args):
    X_train, y_train = training_sets(sinograms, filtered_sinograms, args)

    ss0 = sinograms[0].shape[0]
    ss1 = sinograms[0].shape[1]

    inputs = Input(shape=(ss0,ss1,1))

    x = Conv2D(64, (3,3), padding = 'same',activation='relu')(inputs)
    x = BatchNormalization()(x)
    x = Conv2D(32, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)
    x = Conv2D(16, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)
    x = Conv2D(8, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)
    x = Conv2D(1, (3,3), padding = 'same', activation = 'relu')(x)

    model = Model(inputs=inputs, outputs=x)
    model.compile(optimizer='sgd', loss='mse', metrics=['accuracy'])
    model.fit(X_train, y_train, batch_size = 10, epochs  = 10)
    
    return model



model = nn_1(sinograms, filtered_sinograms, args)
model.save('model_1.h5')
model = load_model('model_1.h5')


#Create the predictions of the entire set

predictions = get_predictions(sinograms, model, ss0, ss1)

inpainted_sinograms = inpaint(filtered_sinograms, filters, predictions, args)
median_inpaints = median_blur(inpainted_sinograms, 3, args)

num_results = 3
pred_nums = np.array(random.sample(range(len(sinograms)), num_results))
theta = np.linspace(0, 180, args['img_size'])

final_results = plot_results(pred_nums, filtered_sinograms, \
                             inpainted_sinograms, median_inpaints,\
                             phantoms, sinograms, predictions, args, theta)

good_num = 3						 
img_irad, img_rec = plot_good(final_results, good_num)
error = np.abs(img_irad - img_rec)
error_error = np.abs(final_results[good_num][0] - error)
added_back = error + error_error

plots((final_results[good_num][0], 'original'), (img_irad, 'iradon'), \
      (img_rec, 'inpainted'), (error, 'error'),\
      (np.abs(final_results[good_num][0] - error), 'error of error'),
      (added_back, 'added_back'))

plot_collection(final_results[good_num], [img_irad, img_rec, error, error_error, added_back])



###############################################################################
#
#       Convolutional Neural Network 2   --------NOT GOOD----------
#
###############################################################################

##
##
##
##def training_2(X_train,y_train, ss0, ss1):
##    trainings = []
##    image_set = [X_train, y_train]
##    for j in range(len(image_set)):
##        padded_images = []
##        for i in range(len()):
##            reshaped_image = image_set[j][i].reshape((ss0, ss1))
##            padding_row = np.zeros((1, ss1))
##            padded_image = np.r_[padding_row, reshaped_image]
##            padded_images.append(padded_image)
##        trainings.append(padded_images)
##
##    trainings = np.array(trainings)
##        
####    X_train_2 = np.array(trainings[0]).reshape((len(X_train), \
####                                    np.array(trainings[0]).shape[1],ss1, 1))
####    y_train_2 = np.array(trainings[1]).reshape((len(X_train), \
####                                    np.array(trainings[1]).shape[1],ss1, 1))
####
####    
####    return X_train_2, y_train_2
##    return trainings
##
##
##def training_2(X_train,y_train, ss0, ss1):
##    trainings = []
##    image_set = [X_train, y_train]
##    for images in image_set:
##        padded_images = []
##        for image in images:
##            reshaped_image = image.reshape((ss0, ss1))
##            padding_row = np.zeros((1, ss1))
##            padded_image = np.r_[padding_row, reshaped_image]
##            padded_images.append(padded_image)
##        trainings.append(padded_images)
##        
##    trainings = np.array(trainings)
##    X_train_2 = trainings[0].reshape(trainings[0].shape + (1,))
##    y_train_2 = trainings[1].reshape(trainings[1].shape + (1,))
##
##    
##    
##
##    return X_train_2, y_train_2
##
##X_train_2, y_train_2 = training_2(X_train, y_train, ss0, ss1)
##
##
##inputs_2 = Input(shape=X_train_2.shape[1:])
##
###Encode
##
##x2 = Conv2D(256, (3,3), padding = 'same',activation='relu')(inputs_2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##x2 = Conv2D(128, (3,3), padding = 'same',activation='relu')(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##x2 = Conv2D(64, (3,3), padding = 'same',activation='relu')(x2)
##x2 = MaxPooling2D((2,2), strides = None, padding = 'valid')(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##x2 = Conv2D(32, (3,3), padding = 'same',activation='relu')(x2)
##x2 = MaxPooling2D((2,2), strides = None, padding = 'valid')(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##x2 = Conv2D(16, (3,3), padding = 'same',activation='relu')(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##
###Decode
##
##
##
##
##x2 = Conv2D(16, (3,3), padding = 'same',activation='relu')(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##x2 = Conv2D(32, (3,3), padding = 'same',activation='relu')(x2)
##x2 = UpSampling2D(size = (2, 2))(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##x2 = Conv2D(64, (3,3), padding = 'same',activation='relu')(x2)
##x2 = UpSampling2D((2,2))(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##x2 = Conv2D(128, (3,3), padding = 'same',activation='relu')(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##x2 = Conv2D(1, (3,3), padding = 'same',activation='relu')(x2)
##x2 = UpSampling2D((2,2))(x2)
##x2 = BatchNormalization()(x2)
##x2 = Dropout(0.5)(x2)
##
##ss20 = X_train_2.shape[1]
##ss21 = X_train_2.shape[2]
##
##x2 = Cropping2D(cropping = (ss20//2, ss21//2))(x2)
##
##
##model_2 = Model(inputs=inputs_2, outputs=x2)
##model_2.compile(optimizer='sgd',
##              loss='mse',
##              metrics=['accuracy'])
##			  
##model_2.summary()
##			 
##			  
##			  
##model_2.fit(X_train_2, y_train_2, batch_size = 10, epochs  = 10)
##
##

###############################################################################
#
#                      Convolutional Neural Network 3
#
###############################################################################

X_train, y_train = training_sets(sinograms, filtered_sinograms, args)

ss0 = sinograms[0].shape[0]
ss1 = sinograms[0].shape[1]

inputs_3 = Input(shape=(ss0,ss1,1))

x3 = Conv2D(256, (3,3), padding = 'same',activation='relu')(inputs_3)
x3 = BatchNormalization()(x3)
x3 = Conv2D(128, (3,3), padding = 'same',activation='relu')(x3)
x3 = BatchNormalization()(x3)
x3 = Conv2D(64, (3,3), padding = 'same',activation='relu')(x3)
x3 = BatchNormalization()(x3)
x3 = Conv2D(32, (3,3), padding = 'same', activation = 'relu')(x3)
x3 = BatchNormalization()(x3)
x3 = Conv2D(16, (3,3), padding = 'same', activation = 'relu')(x3)
x3 = BatchNormalization()(x3)
x3 = Conv2D(8, (3,3), padding = 'same', activation = 'relu')(x3)
x3 = BatchNormalization()(x3)
x3 = Conv2D(1, (3,3), padding = 'same', activation = 'relu')(x3)

model_3 = Model(inputs=inputs_3, outputs=x3)
model_3.compile(optimizer='sgd',
              loss='mse',
              metrics=['accuracy'])
model_3.summary()

model_3.fit(X_train, y_train, batch_size = 10, epochs  = 10)

model_3.save('model_3.h5')
model_3 = load_model('model_3.h5')

###############            Post Network

pred_inp_med_3 = post_network(sinograms, filters, model_3, args)
    
num_results = 10
pred_nums = np.array(random.sample(range(len(sinograms)), num_results))
theta = np.linspace(0, 180, args['img_size'])

final_results_3 = plot_results(pred_nums, filtered_sinograms, \
                                 pred_inp_med_3[1], pred_inp_med_3[2],\
                                 phantoms, sinograms, pred_inp_med_3[0], args, theta)
good_num = 3

#Contents described in plots below
errors_3 = get_errors(final_results_3, good_num)

plots((final_results_3[errors_3[-1]][0], 'original'), (errors_3[0], 'iradon'), \
      (errors_3[1], 'inpainted'), (errors_3[2], 'error'),\
      (errors_3[3], 'error of error'),
      (errors_3[4], 'added_back_3'))

plot_collection(final_results_3[good_num], [errors_3[0], errors_3[1], errors_3[2], errors_3[3], (errors_3[4], 'added_back_3')])


###############################################################################
#
#        Convolutional Neural Network 4     -  Promising
#
###############################################################################



def nn_4(sinograms, filtered_sinograms, args):
    X_train, y_train = training_sets(sinograms, filtered_sinograms, args)

    ss0 = sinograms[0].shape[0]
    ss1 = sinograms[0].shape[1]

    inputs = Input(shape=(ss0,ss1,1))
    
    x = Conv2D(1024, (3,3), padding = 'same',activation='relu')(inputs)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    x = Conv2D(1024, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    
    x = Conv2D(512, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    x = Conv2D(512, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    
    x = Conv2D(256, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    x = Conv2D(256, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    
    x = Conv2D(128, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    x = Conv2D(128, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    
    x = Conv2D(64, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    x = Conv2D(64, (3,3), padding = 'same',activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    
    x = Conv2D(32, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    x = Conv2D(32, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)

    x = Conv2D(16, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    x = Conv2D(16, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.5)(x)
    
    x = Conv2D(8, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)    
    x = Dropout(0.5)(x)
    x = Conv2D(8, (3,3), padding = 'same', activation = 'relu')(x)
    x = BatchNormalization()(x)    
    x = Dropout(0.5)(x)
    
    x = Conv2D(1, (3,3), padding = 'same', activation = 'relu')(x)

    model = Model(inputs=inputs, outputs=x)
    model.compile(optimizer='sgd', loss='mse', metrics=['accuracy'])
    model.fit(X_train, y_train, batch_size = 10, epochs  = 10)
    
    return model

model_4 = nn_4(sinograms, filtered_sinograms, args)

model_4.save('model_4.h5')
model_4 = load_model('model_4.h5')

###############            Post Network

pred_inp_med_4 = post_network(sinograms, filters, model_4, args)
    
num_results = 10
pred_nums = np.array(random.sample(range(len(sinograms)), num_results))
theta = np.linspace(0, 180, args['img_size'])

final_results_4 = plot_results(pred_nums, filtered_sinograms, \
                                 pred_inp_med_4[1], pred_inp_med_4[2],\
                                 phantoms, sinograms, pred_inp_med_4[0], args, theta)
good_num = 2

errors_4 = get_errors(final_results_4, good_num)

plots((final_results_4[errors_4[-1]][0], 'original'), (errors_4[0], 'iradon'), \
      (errors_4[1], 'inpainted'), (errors_4[2], 'error'),\
      (errors_4[3], 'error of error'),
      (errors_4[4], 'added_back_3'))

plot_collection(final_results_4[good_num], [errors_4[0], errors_4[1], errors_4[2], errors_4[3], (errors_4[4], 'added_back_4')])

